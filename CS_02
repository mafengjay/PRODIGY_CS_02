from PIL import Image
import numpy as np
import os

def encrypt_image(image_path, key, operation='xor'):
    """
    Encrypts an image by performing pixel manipulation
    
    Args:
        image_path (str): Path to the image file
        key (int): Encryption key (0-255)
        operation (str): 'xor', 'add', or 'swap'
    
    Returns:
        str: Path to the encrypted image
    """
    try:
        # Open the image
        img = Image.open(image_path)
        img_array = np.array(img)
        
        # Perform encryption based on selected operation
        if operation == 'xor':
            encrypted_array = img_array ^ key
        elif operation == 'add':
            encrypted_array = (img_array + key) % 256
        elif operation == 'swap':
            # Swap RGB channels based on key
            encrypted_array = np.roll(img_array, key % 3, axis=2)
        else:
            raise ValueError("Invalid operation")
        
        # Create and save encrypted image
        encrypted_img = Image.fromarray(encrypted_array)
        base, ext = os.path.splitext(image_path)
        encrypted_path = f"{base}_encrypted{ext}"
        encrypted_img.save(encrypted_path)
        
        return encrypted_path
    
    except Exception as e:
        print(f"Encryption failed: {str(e)}")
        return None

def decrypt_image(encrypted_path, key, operation='xor'):
    """
    Decrypts an image by reversing the pixel manipulation
    
    Args:
        encrypted_path (str): Path to the encrypted image
        key (int): Encryption key (0-255)
        operation (str): 'xor', 'add', or 'swap'
    
    Returns:
        str: Path to the decrypted image
    """
    try:
        # Open the encrypted image
        img = Image.open(encrypted_path)
        img_array = np.array(img)
        
        # Perform decryption based on operation
        if operation == 'xor':
            decrypted_array = img_array ^ key
        elif operation == 'add':
            decrypted_array = (img_array - key) % 256
        elif operation == 'swap':
            # Swap back RGB channels
            decrypted_array = np.roll(img_array, -key % 3, axis=2)
        else:
            raise ValueError("Invalid operation")
        
        # Create and save decrypted image
        decrypted_img = Image.fromarray(decrypted_array)
        base, ext = os.path.splitext(encrypted_path)
        decrypted_path = f"{base}_decrypted{ext}"
        decrypted_img.save(decrypted_path)
        
        return decrypted_path
    
    except Exception as e:
        print(f"Decryption failed: {str(e)}")
        return None

def main():
    """Main program interface"""
    print("\n=== Image Encryption Tool ===")
    print("1. Encrypt an image")
    print("2. Decrypt an image")
    print("3. Exit")
    
    while True:
        choice = input("\nEnter your choice (1-3): ")
        
        if choice == '3':
            print("Goodbye!")
            break
            
        if choice not in ('1', '2'):
            print("Invalid choice. Please enter 1, 2, or 3.")
            continue
            
        # Get image path
        image_path = input("Enter image file path: ")
        if not os.path.exists(image_path):
            print("File not found!")
            continue
            
        # Get encryption key
        try:
            key = int(input("Enter encryption key (0-255): "))
            if not 0 <= key <= 255:
                print("Key must be between 0 and 255")
                continue
        except ValueError:
            print("Invalid key. Must be an integer.")
            continue
            
        # Get operation
        print("\nAvailable operations:")
        print("1. XOR (simple bitwise operation)")
        print("2. Add/Subtract (value shifting)")
        print("3. Channel Swap (RGB rearrangement)")
        op_choice = input("Select operation (1-3): ")
        
        operations = {'1': 'xor', '2': 'add', '3': 'swap'}
        operation = operations.get(op_choice, 'xor')
        
        # Perform operation
        if choice == '1':
            result_path = encrypt_image(image_path, key, operation)
            if result_path:
                print(f"\nImage encrypted successfully! Saved as: {result_path}")
        else:
            result_path = decrypt_image(image_path, key, operation)
            if result_path:
                print(f"\nImage decrypted successfully! Saved as: {result_path}")

if __name__ == "__main__":
    main()
